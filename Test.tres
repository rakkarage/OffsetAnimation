[gd_resource type="VisualShader" load_steps=21 format=2]

[sub_resource type="VisualShaderNodeScalarUniform" id=1]
uniform_name = "FrameCount"

[sub_resource type="VisualShaderNodeScalarUniform" id=2]
uniform_name = "FrameLength"

[sub_resource type="VisualShaderNodeScalarOp" id=3]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=4]
operator = 4

[sub_resource type="VisualShaderNodeScalarOp" id=5]
operator = 3

[sub_resource type="VisualShaderNodeScalarFunc" id=6]
function = 14

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "time"

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarOp" id=9]
operator = 3

[sub_resource type="VisualShaderNodeScalarOp" id=10]

[sub_resource type="VisualShaderNodeScalarOp" id=11]
operator = 4

[sub_resource type="VisualShaderNodeVectorDecompose" id=12]

[sub_resource type="VisualShaderNodeVectorOp" id=13]
operator = 1

[sub_resource type="VisualShaderNodeVectorOp" id=14]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=15]
function = 14

[sub_resource type="VisualShaderNodeVectorCompose" id=16]

[sub_resource type="VisualShaderNodeTextureUniform" id=17]
uniform_name = "Atlas"

[sub_resource type="VisualShaderNodeScalarUniform" id=18]
uniform_name = "frameWidth"

[sub_resource type="VisualShaderNodeVectorOp" id=19]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=20]

[resource]
code = "shader_type canvas_item;
uniform float frameWidth;
uniform float FrameCount;
uniform float FrameLength;
uniform sampler2D Atlas;



void vertex() {
// Output:0

}

void fragment() {
// Input:21
	vec3 n_out21p0 = vec3(UV, 0.0);

// VectorDecompose:30
	float n_out30p0 = n_out21p0.x;
	float n_out30p1 = n_out21p0.y;
	float n_out30p2 = n_out21p0.z;

// ScalarUniform:48
	float n_out48p0 = frameWidth;

// ScalarOp:24
	float n_out24p0 = n_out30p0 / n_out48p0;

// ScalarFunc:35
	float n_out35p0 = floor(n_out24p0);

// VectorCompose:38
	float n_in38p1 = 0.00000;
	float n_in38p2 = 0.00000;
	vec3 n_out38p0 = vec3(n_out48p0, n_in38p1, n_in38p2);

// VectorOp:33
	vec3 n_out33p0 = vec3(n_out35p0) * n_out38p0;

// VectorOp:32
	vec3 n_out32p0 = n_out21p0 - n_out33p0;

// Input:2
	float n_out2p0 = TIME;

// ScalarUniform:10
	float n_out10p0 = FrameCount;

// ScalarUniform:13
	float n_out13p0 = FrameLength;

// ScalarOp:15
	float n_out15p0 = n_out10p0 * n_out13p0;

// ScalarOp:16
	float n_out16p0 = mod(n_out2p0, n_out15p0);

// ScalarOp:17
	float n_out17p0 = n_out16p0 / n_out13p0;

// ScalarFunc:18
	float n_out18p0 = floor(n_out17p0);

// ScalarOp:25
	float n_out25p0 = n_out35p0 + n_out18p0;

// ScalarOp:26
	float n_out26p0 = mod(n_out25p0, n_out10p0);

// VectorOp:7
	vec3 n_out7p0 = n_out38p0 * vec3(n_out26p0);

// VectorOp:8
	vec3 n_out8p0 = n_out32p0 + n_out7p0;

// TextureUniform:45
	vec3 n_out45p0;
	float n_out45p1;
	{
		vec4 n_tex_read = texture(Atlas, n_out8p0.xy);
		n_out45p0 = n_tex_read.rgb;
		n_out45p1 = n_tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out45p0;
	COLOR.a = n_out45p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -55, 311.5 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1460, 400 )
nodes/fragment/2/node = SubResource( 7 )
nodes/fragment/2/position = Vector2( -320, 500 )
nodes/fragment/7/node = SubResource( 19 )
nodes/fragment/7/position = Vector2( 880, 460 )
nodes/fragment/8/node = SubResource( 20 )
nodes/fragment/8/position = Vector2( 1080, 380 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -580, 540 )
nodes/fragment/13/node = SubResource( 2 )
nodes/fragment/13/position = Vector2( -580, 700 )
nodes/fragment/15/node = SubResource( 3 )
nodes/fragment/15/position = Vector2( -320, 580 )
nodes/fragment/16/node = SubResource( 4 )
nodes/fragment/16/position = Vector2( -120, 540 )
nodes/fragment/17/node = SubResource( 5 )
nodes/fragment/17/position = Vector2( 80, 600 )
nodes/fragment/18/node = SubResource( 6 )
nodes/fragment/18/position = Vector2( 260, 620 )
nodes/fragment/21/node = SubResource( 8 )
nodes/fragment/21/position = Vector2( -340, 340 )
nodes/fragment/24/node = SubResource( 9 )
nodes/fragment/24/position = Vector2( 80, 260 )
nodes/fragment/25/node = SubResource( 10 )
nodes/fragment/25/position = Vector2( 480, 480 )
nodes/fragment/26/node = SubResource( 11 )
nodes/fragment/26/position = Vector2( 680, 520 )
nodes/fragment/30/node = SubResource( 12 )
nodes/fragment/30/position = Vector2( -160, 260 )
nodes/fragment/32/node = SubResource( 13 )
nodes/fragment/32/position = Vector2( 880, 320 )
nodes/fragment/33/node = SubResource( 14 )
nodes/fragment/33/position = Vector2( 680, 380 )
nodes/fragment/35/node = SubResource( 15 )
nodes/fragment/35/position = Vector2( 260, 280 )
nodes/fragment/38/node = SubResource( 16 )
nodes/fragment/38/position = Vector2( 128, 400 )
nodes/fragment/45/node = SubResource( 17 )
nodes/fragment/45/position = Vector2( 1260, 320 )
nodes/fragment/48/node = SubResource( 18 )
nodes/fragment/48/position = Vector2( -140, 400 )
nodes/fragment/connections = PoolIntArray( 7, 0, 8, 1, 17, 0, 18, 0, 21, 0, 30, 0, 25, 0, 26, 0, 10, 0, 26, 1, 24, 0, 35, 0, 35, 0, 33, 0, 35, 0, 25, 0, 7, 0, 8, 1, 17, 0, 18, 0, 21, 0, 30, 0, 25, 0, 26, 0, 10, 0, 26, 1, 24, 0, 35, 0, 35, 0, 33, 0, 35, 0, 25, 0, 16, 0, 17, 0, 2, 0, 16, 0, 15, 0, 16, 1, 10, 0, 15, 0, 33, 0, 32, 1, 21, 0, 32, 0, 18, 0, 25, 1, 32, 0, 8, 0, 8, 0, 45, 0, 45, 0, 0, 0, 45, 1, 0, 1, 26, 0, 7, 1, 30, 0, 24, 0, 13, 0, 15, 1, 13, 0, 17, 1, 48, 0, 24, 1, 48, 0, 38, 0, 38, 0, 7, 0, 38, 0, 33, 1 )
